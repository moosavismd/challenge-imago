name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  packages: write
  id-token: write

env:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  # Deployment server configuration - can be overridden in GitHub Secrets
  SERVER_A_IP: "188.121.101.29"
  SERVER_B_IP: "37.32.8.38"
  DEPLOY_AGENT_PORT: "8080"
  DEPLOY_TIMEOUT: "60"
  VERIFY_TIMEOUT: "30"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd api-service
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 mypy types-requests

      - name: Run linting checks
        run: |
          cd api-service
          echo "üîç Running linting checks..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run type checking
        run: |
          cd api-service
          echo "üîç Running type checking..."
          mypy . --ignore-missing-imports --no-strict-optional

      - name: Run unit tests
        run: |
          cd api-service
          echo "üß™ Running unit tests..."
          python -m pytest test_api.py -v --cov=. --cov-report=xml --cov-report=term-missing

      - name: Test API endpoints
        run: |
          cd api-service
          echo "üåê Testing API endpoints..."
          
          # Start the API server in background
          python api-server.py &
          API_PID=$!
          
          # Wait for server to start
          sleep 5
          
          # Test health endpoint
          if curl -f http://localhost:8000/health; then
            echo "‚úÖ Health endpoint working"
          else
            echo "‚ùå Health endpoint failed"
            exit 1
          fi
          
          # Test home endpoint
          if curl -f http://localhost:8000/; then
            echo "‚úÖ Home endpoint working"
          else
            echo "‚ùå Home endpoint failed"
            exit 1
          fi
          
          # Test random endpoint
          if curl -f http://localhost:8000/random; then
            echo "‚úÖ Random endpoint working"
          else
            echo "‚ùå Random endpoint failed"
            exit 1
          fi
          
          # Test constant endpoint
          if curl -f http://localhost:8000/cons; then
            echo "‚úÖ Constant endpoint working"
          else
            echo "‚ùå Constant endpoint failed"
            exit 1
          fi
          
          # Stop the server
          kill $API_PID
          echo "üéâ All API endpoint tests passed!"

      - name: Test Docker build
        run: |
          cd api-service
          echo "üê≥ Testing Docker build..."
          docker build -t test-media-service .
          
          # Test container runs
          docker run -d --name test-container -p 8001:8000 test-media-service
          sleep 10
          
          # Test container health
          if curl -f http://localhost:8001/health; then
            echo "‚úÖ Docker container working"
          else
            echo "‚ùå Docker container failed"
            exit 1
          fi
          
          # Cleanup
          docker stop test-container
          docker rm test-container
          echo "üéâ Docker build test passed!"

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          cd api-service
          # Build with commit SHA tag
          docker build -t ghcr.io/${{ github.repository }}:${{ github.sha }} .
          # Tag as latest
          docker tag ghcr.io/${{ github.repository }}:${{ github.sha }} ghcr.io/${{ github.repository }}:latest
          # Push both tags
          docker push ghcr.io/${{ github.repository }}:${{ github.sha }}
          docker push ghcr.io/${{ github.repository }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install curl
        run: |
          # curl is available by default on ubuntu-latest

      - name: Deploy to Server A
        id: deploy-server-a
        run: |
          echo "Deploying to Server A..."
          response=$(curl -s -w "\n%{http_code}" -X POST "http://${{ env.SERVER_A_IP }}:${{ env.DEPLOY_AGENT_PORT }}/deploy" \
            -H "Authorization: Bearer ${{ secrets.DEPLOY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"image_tag\": \"${{ github.sha }}\"}" \
            --max-time ${{ env.DEPLOY_TIMEOUT }})
          
          http_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | head -n -1)
          
          echo "Server A deployment response: $response_body"
          echo "Server A HTTP status: $http_code"
          
          if [ "$http_code" -ne 200 ]; then
            echo "‚ùå Server A deployment failed with HTTP $http_code"
            exit 1
          else
            echo "‚úÖ Server A deployment successful"
          fi

      - name: Deploy to Server B
        id: deploy-server-b
        run: |
          echo "Deploying to Server B..."
          response=$(curl -s -w "\n%{http_code}" -X POST "http://${{ env.SERVER_B_IP }}:${{ env.DEPLOY_AGENT_PORT }}/deploy" \
            -H "Authorization: Bearer ${{ secrets.DEPLOY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"image_tag\": \"${{ github.sha }}\", \"registry_image\": \"ghcr.io/${{ github.repository }}\"}" \
            --max-time ${{ env.DEPLOY_TIMEOUT }})
          
          http_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | head -n -1)
          
          echo "Server B deployment response: $response_body"
          echo "Server B HTTP status: $http_code"
          
          if [ "$http_code" -ne 200 ]; then
            echo "‚ùå Server B deployment failed with HTTP $http_code"
            exit 1
          else
            echo "‚úÖ Server B deployment successful"
          fi

      - name: Wait for deployments
        run: |
          echo "Waiting for deployments to complete..."
          sleep 30

      - name: Verify deployments
        id: verify-deployments
        run: |
          echo "Verifying deployments..."
          
          # Verify Server A
          echo "Verifying Server A..."
          if ! curl -f "http://${{ env.SERVER_A_IP }}:${{ env.DEPLOY_AGENT_PORT }}/status" --max-time ${{ env.VERIFY_TIMEOUT }}; then
            echo "‚ùå Server A verification failed"
            exit 1
          fi
          echo "‚úÖ Server A verification successful"
          
          # Verify Server B
          echo "Verifying Server B..."
          if ! curl -f "http://${{ env.SERVER_B_IP }}:${{ env.DEPLOY_AGENT_PORT }}/status" --max-time ${{ env.VERIFY_TIMEOUT }}; then
            echo "‚ùå Server B verification failed"
            exit 1
          fi
          echo "‚úÖ Server B verification successful"
          
          echo "üéâ All deployments verified successfully!"

      - name: Rollback on deployment failure
        if: failure() && steps.verify-deployments.outcome == 'failure'
        run: |
          echo "üö® Deployment verification failed! Initiating automatic rollback..."
          
          # Get previous commit SHA for rollback
          PREVIOUS_SHA=$(git rev-parse HEAD~1)
          echo "Rolling back to previous commit: $PREVIOUS_SHA"
          
          # Rollback Server A
          echo "Rolling back Server A..."
          if curl -f -X POST "http://${{ env.SERVER_A_IP }}:${{ env.DEPLOY_AGENT_PORT }}/rollback" \
            -H "Authorization: Bearer ${{ secrets.DEPLOY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"previous_tag\": \"$PREVIOUS_SHA\"}" \
            --max-time ${{ env.DEPLOY_TIMEOUT }}; then
            echo "‚úÖ Server A rollback successful"
          else
            echo "‚ùå Server A rollback failed"
          fi
          
          # Rollback Server B
          echo "Rolling back Server B..."
          if curl -f -X POST "http://${{ env.SERVER_B_IP }}:${{ env.DEPLOY_AGENT_PORT }}/rollback" \
            -H "Authorization: Bearer ${{ secrets.DEPLOY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"previous_tag\": \"$PREVIOUS_SHA\"}" \
            --max-time ${{ env.DEPLOY_TIMEOUT }}; then
            echo "‚úÖ Server B rollback successful"
          else
            echo "‚ùå Server B rollback failed"
          fi
          
          echo "üîÑ Rollback process completed"
          exit 1  # Ensure the job still fails after rollback
