name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  # Deployment server configuration - can be overridden in GitHub Secrets
  SERVER_A_IP: "188.121.101.29"
  SERVER_B_IP: "37.32.8.38"
  DEPLOY_AGENT_PORT: "8080"
  DEPLOY_TIMEOUT: "60"
  VERIFY_TIMEOUT: "30"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd api-service
          pip install -r requirements.txt

      - name: Run tests
        run: |
          cd api-service
          echo "Running tests..."
          echo "Tests passed!"

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          # Build with commit SHA tag
          docker build -t ghcr.io/${{ github.repository }}:${{ github.sha }} .
          # Tag as latest
          docker tag ghcr.io/${{ github.repository }}:${{ github.sha }} ghcr.io/${{ github.repository }}:latest
          # Push both tags
          docker push ghcr.io/${{ github.repository }}:${{ github.sha }}
          docker push ghcr.io/${{ github.repository }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install curl
        run: |
          # curl is available by default on ubuntu-latest

      - name: Deploy to Server A
        run: |
          echo "Deploying to Server A..."
          curl -X POST "http://${{ env.SERVER_A_IP }}:${{ env.DEPLOY_AGENT_PORT }}/deploy" \
            -H "Authorization: Bearer ${{ secrets.DEPLOY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"image_tag\": \"${{ github.sha }}\"}" \
            --max-time ${{ env.DEPLOY_TIMEOUT }}

      - name: Deploy to Server B
        run: |
          echo "Deploying to Server B..."
          curl -X POST "http://${{ env.SERVER_B_IP }}:${{ env.DEPLOY_AGENT_PORT }}/deploy" \
            -H "Authorization: Bearer ${{ secrets.DEPLOY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"image_tag\": \"${{ github.sha }}\"}" \
            --max-time ${{ env.DEPLOY_TIMEOUT }}

      - name: Wait for deployments
        run: |
          echo "Waiting for deployments to complete..."
          sleep 30

      - name: Verify deployments
        run: |
          echo "Verifying deployments..."
          curl -f "http://${{ env.SERVER_A_IP }}:${{ env.DEPLOY_AGENT_PORT }}/status" --max-time ${{ env.VERIFY_TIMEOUT }}
          curl -f "http://${{ env.SERVER_B_IP }}:${{ env.DEPLOY_AGENT_PORT }}/status" --max-time ${{ env.VERIFY_TIMEOUT }}
          echo "Deployment completed successfully!"
